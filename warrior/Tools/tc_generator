#!/usr/bin/env/python3

import argparse
import os
import logging
import site
import sys
from xml.etree import ElementTree as et

# Argparser to add command line argumets
parser = argparse.ArgumentParser()
parser.add_argument('-t', '--type', help="type of test case cli or netconf", required=True)
parser.add_argument('-tc','--tc_name', help="Name of the the test case ", required=True)
parser.add_argument('--ip', help="Ip address of the device", required=True)
parser.add_argument("-u", '--username', help="username of the device ", required=True)
parser.add_argument("-p",'--password', help="password of the device ", required=True)
parser.add_argument("-v","--verbose", action="store_true", help="To display the debug messages ")
parser.add_argument("-w",'--with_repo_structure', action='store_true',
                    help="to store the generated output files in warriorspace format")
args = parser.parse_args()

if args.verbose:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.INFO)


class Warrior_Execution_Setup_Files:

    def __init__(self):
        self.log = logging
        if not args.tc_name.endswith(".xml"):
            sys.exit("tc_name must end with .xml")
        self.tc_name = args.tc_name.split(".")[0]
        self.current_working_directory = os.getcwd()
        self.log.debug("current working directory is {}".format(self.current_working_directory))
        site_home_path = os.path.split(site.__file__)[0]
        site_packages_path = "site-packages/warrior/Tools/templates"
        self.template_path = os.path.join(site_home_path, site_packages_path)
        #self.template_path = os.path.join(self.current_working_directory, "templates")
        self.input_data_file = "id_{}.xml".format(self.tc_name)
        self.tc_file = "{}.xml".format(self.tc_name)
        self.td_file = "td_{}.xml".format(self.tc_name)


    def setup_warrior_structure(self):
        self.ws_directory = "Warriorspace"
        self.testcases_dir = "Warriorspace/Testcases"
        self.data_files_dir = "Warriorspace/Datafiles"
        self.config_files_dir = "Warriorspace/Configfiles"
        self.project_files_dir = "Warriorspace/Projects"
        self.testsuite_files_dir = "Warriorspace/Testsuites"

        os.chdir(self.current_working_directory)

        # for warriorspace
        if not os.path.exists(self.ws_directory):
            self.log.debug("creating directory {}".format(self.ws_directory))
            os.mkdir(self.ws_directory)
        else:
            self.log.debug("{} directory already presented ".format(self.ws_directory))

        # for testcase
        if not os.path.exists(self.testcases_dir):
            self.log.debug("creating {} directory".format(self.testcases_dir))
            os.mkdir(self.testcases_dir)
        else:
            self.log.debug("{} directory already presented ".format(self.testcases_dir))

        # for data file
        if not os.path.exists(self.data_files_dir):
            self.log.debug("creating {} directory".format(self.data_files_dir))
            os.mkdir(self.data_files_dir)
        else:
            self.log.debug("{} directory already presented".format(self.data_files_dir))

        # for config files
        if not os.path.exists(self.config_files_dir):
            self.log.debug("creating {} directory".format(self.config_files_dir))
            os.mkdir(self.config_files_dir)
        else:
            self.log.debug("{} directory already presented".format(self.config_files_dir))

        # for test suites
        if not os.path.exists(self.testsuite_files_dir):
            self.log.debug("creating {} directory".format(self.testsuite_files_dir))
            os.mkdir(self.testsuite_files_dir)
        else:
            self.log.debug("{} directory already presented".format(self.testsuite_files_dir))

        # for proejct files
        if not os.path.exists(self.project_files_dir):
            self.log.debug("creating {} directory".format(self.project_files_dir))
            os.mkdir(self.project_files_dir)
        else:
            self.log.debug("{} directory already presented".format(self.project_files_dir))

    def replace_values_in_input_data_xml_tags(self):
        tree = et.parse(self.input_data_file_path)
        tree.find('.//username').text = args.username
        tree.find('.//password').text = args.password
        tree.find('.//ip').text = args.ip
        if args.with_repo_structure:
            self.td_file = os.path.join(self.current_working_directory, self.config_files_dir, self.td_file)
        tree.find('.//testdata').text = self.td_file
        tree.write(self.input_data_file_path)

    def replace_values_in_test_case_xml_tags(self):
        tree = et.parse(self.test_case_file_path)
        if args.with_repo_structure:
            self.input_data_file = os.path.join(self.current_working_directory, self.data_files_dir, self.input_data_file)
        tree.find('.//InputDataFile').text = self.input_data_file
        tree.write(self.test_case_file_path)

    def generate_cli_files(self, with_repo_structure=False):

        if args.type == "cli":
            if os.path.exists(self.template_path):
                if with_repo_structure:

                    os.system("cp {} {}".format(os.path.join(self.template_path, "cli_data_file_template.xml"),
                                                os.path.join(self.current_working_directory, self.data_files_dir,
                                                             self.input_data_file)))
                    os.system("cp {} {}".format(os.path.join(self.template_path, "cli_test_data_template.xml"),
                                                os.path.join(self.current_working_directory, self.config_files_dir,
                                                             self.td_file)))
                    os.system("cp {} {}".format(os.path.join(self.template_path, "cli_test_case_template.xml"),
                                                os.path.join(self.current_working_directory, self.testcases_dir,
                                                             self.tc_file)))

                    self.input_data_file_path = os.path.join(self.current_working_directory, self.data_files_dir,
                                                             self.input_data_file)
                    print("*******")
                    print("Location of input data file : {}".format(self.input_data_file_path))
                    print("*******")
                    self.test_case_file_path = os.path.join(self.current_working_directory, self.testcases_dir,
                                                            self.tc_file)
                    print("*******")
                    print("Location of test case file : {}".format(self.test_case_file_path))
                    print("*******")
                    self.test_data_file_path = os.path.join(self.current_working_directory, self.config_files_dir,
                                                            self.td_file)
                    print("*******")
                    print("Location of test data file : {}".format(self.test_data_file_path))
                    print("*******")
                    self.replace_values_in_input_data_xml_tags()
                    self.replace_values_in_test_case_xml_tags()
                    print("Run line  command is : Warrior {}".format(self.test_case_file_path))

                else:
                    # generating the required files i.e test case , data file and testdata file

                    os.system("cp {} {}".format(os.path.join(self.template_path, "cli_data_file_template.xml"),
                                                os.path.join(self.current_working_directory, self.input_data_file)))
                    os.system("cp {} {}".format(os.path.join(self.template_path, "cli_test_data_template.xml"),
                                                os.path.join(self.current_working_directory, self.td_file)))
                    os.system("cp {} {}".format(os.path.join(self.template_path, "cli_test_case_template.xml"),
                                                os.path.join(self.current_working_directory, self.tc_file)))

                    self.input_data_file_path = os.path.join(self.current_working_directory, self.input_data_file)
                    self.test_case_file_path = os.path.join(self.current_working_directory, self.tc_file)
                    self.test_data_file_path = os.path.join(self.current_working_directory, self.td_file)
                    print("*******")
                    print("Location of testcase file::{}".format(self.test_case_file_path))
                    print("*******")
                    print("Location of inputdata file::{}".format(self.input_data_file_path))
                    print("*******")
                    print("Location of testdata file::{}".format(self.test_data_file_path))
                    print("*******")
                    self.replace_values_in_input_data_xml_tags()
                    self.replace_values_in_test_case_xml_tags()
                    print("Run line  command is : Warrior {}".format(self.test_case_file_path))
            else:
                self.log.error("please install warrior as package pip install warriorframework to fix this error")
                # self.log.info("please install warrior as package pip install warriorframework to fix this error")

obj = Warrior_Execution_Setup_Files()
if args.with_repo_structure:
    obj.setup_warrior_structure()
    obj.generate_cli_files(with_repo_structure=True)
else:
    obj.generate_cli_files()
